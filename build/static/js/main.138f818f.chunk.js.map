{"version":3,"sources":["Firebase.js","History.js","components/Login.js","service.js","components/Company-list.js","App.js","serviceWorker.js","components/Sign-up.js","index.js","config.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","settings","createHashHistory","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCollectionUpdate","querySnapshot","user","forEach","doc","_doc$data","data","email","password","push","key","id","setState","handleInputChange","event","defineProperty","target","name","value","signInWithEmailAndPassword","preventDefault","_this$state","state","console","log","auth","then","loginUser","localStorage","setItem","history","catch","error","code","swal","ref","collection","array","hidden","toggleShow","bind","assertThisInitialized","unsubscribe","onSnapshot","_this2","_this$state2","react_default","a","createElement","className","Grid","container","spacing","xs","item","sm","TextField","label","type","autoComplete","margin","variant","onChange","InputProps","endAdornment","InputAdornment","position","IconButton","edge","aria-label","onClick","VisibilityOff_default","Visibility_default","Button","color","disabled","size","Divider","react_router_dom","to","Component","service","displayHistoricalData","historicalData","url","config","getBaseUrl","getBaseUrlForKey","fetch","response","json","err","status","message","selectInterval","intervalData","intervalValue","symbol","selectComparisonCompany","companySymbol","comparedCompanyData","firstSelectedCompany","getSelectedIndicatorData","indicatorData","indicatorValue","getApiData","displaySelectedCompanyGraph","options","chart","stacked","zoom","enabled","toolbar","autoSelected","plotOptions","line","curve","dataLabels","markers","style","colors","opacity","title","text","align","fill","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","yaxis","min","max","labels","formatter","val","toFixed","xaxis","tooltip","shared","y","ranges","indicatorList","Companylist","props","checkIfalreadyAddOrNot","companyName","isSearchClick","isOpenCompanyList","getItem","email1","companyData","where","get","length","willDelete","window","location","reload","addCompanyToDatabase","isLoaded","add","docRef","prop","isSelectHistorical","intervalApiData","intervalArray","isComparedCompany","API","res","originalObject","isIntervalValue","isSelectinterval","selectedInterval","graphData","date","open","high","low","close","volume","displayGraphOfInterval","isIndicatorGraph","firstCompany","selectedCompany","firstSelectedCompanyArray","Note","alert","originalObjectforDisplay","secondSelectedCompanyArray","displayGraphOfComparison","selectedCompanySymbol","indicatorGraphData","indicatorDataArray","indicatorObj","displayGraphOfIndicator","getDate","Date","toDateString","logOut","signOut","clear","removeItem","searchResponse","results","query","searchValue","userEmail","grapharray","historicalArray","comparisonOfVolume","historicalOpen","historicalClose","historicalHigh","historicalLow","historicalVolume","historicalAdjClose","values","intervalRange","clickCompanyName","clickCompanySymbol","isToggleOn","setOpen","modalOpen","isOpenSearch","isGraphDisplay","checkAlreadyAddOrNot","addCompanytoWatchlist","getSearchValue","submitSearchValue","getCompany","openSearchbar","displayCompanyList","addComapny","adjclose","_this3","icon","dangerMode","graphSeries","chartData","i","innerArr","JSON","parse","series","chartrender","react_apexcharts_min_default","height","diffrence","first","second","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","_this4","marginRight","showGraphOrSearchResult","List","ListItem","ListItemText","primary","secondary","ListItemSecondaryAction","Add_default","padding","select","float","startAdornment","option","MenuItem","company","indicator","component","scope","displayCompany","deleteCompany","RemoveCircle_default","displayData","fontSize","marginLeft","openCompanyList","cursor","Typography","noWrap","autoFocus","textTransform","_this5","_this6","delete","_this7","setTimeout","_this8","_doc$data2","setLoader","setTheState","App","components_Company_list","components_Login","Boolean","hostname","match","SignUp","e","username","signUp","createdAt","now","isDeleted","updatedAt","createUserWithEmailAndPassword","u","required","isDisabled","createHistory","hashType","ReactDOM","render","react_router","exact","path","Signup","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.138f818f.chunk.js","sourcesContent":["import firebase from 'firebase'\n// import 'firebase/firestore'\n// import \"firebase/auth\";\n// import firestore from 'firebase/firestore';\n// import auth from 'firebase/auth';\n \n// const settings = {timestampsInSnapshots: true};\n// firebase.settings(settings);\n// const timestamp = snapshot.get('created_at'); \n// const date =timestamp.toDate();\n\n\nconst config = {\n  apiKey: \"AIzaSyDi5b1509TgaL4SRLLHDIaX6RMKI4do7eU\",\n    authDomain: \"crud-9e9b3.firebaseapp.com\",\n    databaseURL: \"https://crud-9e9b3.firebaseio.com\",\n    projectId: \"crud-9e9b3\",\n    storageBucket: \"crud-9e9b3.appspot.com\",\n    messagingSenderId: \"508003176857\",\n    appId: \"1:508003176857:web:e69ef846f54c440f\"\n};\nfirebase.initializeApp(config);\n\nfirebase.firestore().settings({});\nexport default firebase;","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import React, { Component } from 'react';\nimport firebase from '../Firebase';\nimport '../components/login.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport history from '../History';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.ref = firebase.firestore().collection('users');\n    this.state = {\n      email: '',\n      password: '',\n      user: [],\n      array: [],\n      hidden: true,\n      loginUser: ''\n    };\n    this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  onCollectionUpdate = (querySnapshot) => {\n    const user = [];\n    querySnapshot.forEach((doc) => {\n      const { email, password } = doc.data();\n      user.push({\n        key: doc.id,\n        doc,\n        email,\n        password,\n      });\n    });\n    this.setState({\n      user\n    });\n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.ref.onSnapshot(this.onCollectionUpdate);\n  }\n\n  /**hide or show password field value */\n  toggleShow() {\n    this.setState({ hidden: !this.state.hidden });\n  }\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  /**sign in with email and password */\n  signInWithEmailAndPassword = (event) => {\n    event.preventDefault();\n    const { email, password } = this.state;\n    console.log(email);\n    console.log(password);\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password).then(() => {\n        this.setState({ loginUser: email })\n        localStorage.setItem('email1', email);\n        console.log(\"login sucessfully\");\n        history.push('/Company-list')\n        // window.location.hash = '/Company-list'\n      }).catch((error) => {\n        console.log('hey error: ', error);\n        if (error.code === \"auth/user-not-found\") {\n          swal(\"Email not found\", \"Please, Signup\", \"error\");\n        } else if (error.code === \" auth/wrong-password\") {\n          swal(\"Please Enter correct password\", \"\", \"error\");\n        } else {\n          swal(\"Internal Server Error\");\n        }\n      })\n  };\n\n  render() {\n    const { email, password } = this.state;\n    return (\n      <div>\n        <div className=\"backgroung_class\">\n          <div className=\"main_class\">\n            <h1 className=\"text-center\">Stock Login</h1>\n            <Grid container spacing={1} xs={12}>\n              <Grid item sm={12} xs={12}>\n                <TextField\n                  id=\"outlined-email-input\"\n                  label=\"Email\"\n                  type=\"email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={email}\n                  onChange={this.handleInputChange}\n                />\n              </Grid>\n              <Grid item sm={12} xs={12}>\n                <TextField\n                  id=\"outlined-password-input\"\n                  label=\"Password\"\n                  type={this.state.hidden ? \"password\" : \"text\"}\n                  name=\"password\"\n                  autoComplete=\"current-password\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={password}\n                  onChange={this.handleInputChange}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          edge=\"end\"\n                          aria-label=\"Toggle password visibility\"\n                          onClick={this.toggleShow}\n                        >\n                          {password ? <VisibilityOff /> : <Visibility />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item sm={12} xs={12}>\n                <Button color=\"primary\" disabled={!this.state.email || !this.state.password} variant=\"contained\" size=\"large\" onClick={(event) => this.signInWithEmailAndPassword(event)}>\n                  Login\n               </Button>\n              </Grid>\n              <Grid item sm={12}>\n                <Divider />\n                <div className=\"text-center\">\n                  New User? <Button color=\"primary\"><Link to=\"/sign-up\">Sign Up</Link></Button>\n                </div>\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n\n","import config from './config';\n\n// let config = new Config;\n\nexport default {\n\n    /**\n     * @param {string} historicalData display histoical data of selected company\n    */\n    displayHistoricalData: (historicalData) => {\n        const url = config.getBaseUrl + \"TIME_SERIES_DAILY_ADJUSTED&symbol=\" + historicalData + config.getBaseUrlForKey;\n        return fetch(url)\n        .then((response) => response.json())\n        .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\n    },\n\n    /**\n     * @param {object} intervalData selected interval value and get data of this \n     */\n    selectInterval: (intervalData) => {\n        if (intervalData.intervalValue == 'MONTHLY') {\n            const url = config.getBaseUrl + \"TIME_SERIES_MONTHLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n            return fetch(url)\n                .then((response) => response.json())\n                .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\n        } else if (intervalData.intervalValue == 'WEEKLY') {\n            const url = config.getBaseUrl + \"TIME_SERIES_WEEKLY&symbol=\" + intervalData.symbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n            return fetch(url)\n                .then((response) => response.json())\n                .catch({ status: 500, message: 'Internal Server Error' });\n        } else {\n            const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + intervalData.symbol + \"&name=apple&interval=\" + intervalData.intervalValue + config.getBaseUrlForKey;\n            return fetch(url)\n                .then((response) => response.json())\n                 .catch((err) => ({ status: 500, message: 'Internal Server Error' +err }));\n        }\n    },\n\n    /**@param {string} companySymbol selected company symbol from dropdown and get data*/\n    selectComparisonCompany: (companySymbol) => {\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n        return fetch(url)\n            .then((response) => response.json())\n            .catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /**\n     * @param {object} firstSelectedCompany first company symbol and get data of this \n     */\n    comparedCompanyData: (firstSelectedCompany) => {\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + firstSelectedCompany + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n        return fetch(url)\n            .then((response) => response.json())\n            .catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /**\n     * @param {object} indicatorData selected indicator data and get data of indicator \n     */\n    getSelectedIndicatorData: (indicatorData) => {\n        const url = config.getBaseUrl + indicatorData.indicatorValue + \"&symbol=\" + indicatorData.indicatorValue + \"&interval=monthly&time_period=10&series_type=open\" + config.getBaseUrlForKey;\n        return fetch(url)\n            .then((response) => response.json())\n            .catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /**\n     * @param {*} companySymbol selected comapny symbol when page load and get data of company symbol \n     */\n    getApiData: (companySymbol) => {\n        const url = config.getBaseUrl + \"SYMBOL_SEARCH&keywords=\" + companySymbol + config.getBaseUrlForKey;\n        return fetch(url)\n            .then((response) => response.json())\n            .catch({ status: 500, message: 'Internal Server Error' });\n    },\n\n    /**\n     * @param {string} companySymbol first company symbol of watchlist or selcted company symbol for display graph \n     */\n    displaySelectedCompanyGraph: (companySymbol) => {\n        const url = config.getBaseUrl + \"TIME_SERIES_INTRADAY&symbol=\" + companySymbol + \"&name=apple&interval=5min\" + config.getBaseUrlForKey;\n        return fetch(url)\n            .then((response) => response.json())\n            .catch({ status: 500, message: 'Internal Server Error' });\n    },\n}\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from '../Firebase';\nimport ReactApexChart from 'react-apexcharts';\nimport swal from 'sweetalert';\nimport '../App.css';\nimport './Company-list.css';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveCircle from '@material-ui/icons/RemoveCircle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport API from '../service';\nimport history from '../History';\n\n\nconst options = {\n    chart: {\n        stacked: false,\n        zoom: {\n            type: 'x',\n            enabled: true\n        },\n        toolbar: {\n            autoSelected: 'zoom'\n        }\n    },\n    plotOptions: {\n        line: {\n            curve: 'smooth',\n        }\n    },\n    dataLabels: {\n        enabled: false\n    },\n\n    markers: {\n        size: 0,\n        style: 'full',\n    },\n    colors: ['#ff4d4d'],\n    opacity: 0.4,\n    title: {\n        text: 'Stock Price Movement',\n        align: 'left'\n    },\n    fill: {\n        type: 'gradient',\n        gradient: {\n            shadeIntensity: 1,\n            inverseColors: false,\n            opacityFrom: 0.5,\n            opacityTo: 0,\n            stops: [0, 90, 100]\n        },\n    },\n    yaxis: {\n        min: 0,\n        max: 250000,\n        labels: {\n            formatter: function (val) {\n                return (val).toFixed(0);\n            },\n        },\n        title: {\n            text: 'Price'\n        },\n    },\n    xaxis: {\n        type: 'datetime',\n    },\n    tooltip: {\n        shared: false,\n        y: {\n            formatter: function (val) {\n                return (val / 1000).toFixed(0)\n            }\n        }\n    }\n}\n\nconst ranges = [\n    {\n        value: '1min',\n        label: '1 min',\n    },\n    {\n        value: '5min',\n        label: '5 mins',\n    },\n    {\n        value: '15min',\n        label: '15 mins',\n    },\n    {\n        value: '30min',\n        label: '30 mins',\n    },\n    {\n        value: '60min',\n        label: '1 hour',\n    },\n    {\n        value: 'WEEKLY',\n        label: '1 week',\n    },\n    {\n        value: 'MONTHLY',\n        label: '1 month',\n    },\n];\n\nconst indicatorList = [\n    {\n        value: 'SMA',\n        label: 'simple moving average (SMA)',\n    },\n    {\n        value: 'EMA',\n        label: ' Exponential moving average (EMA) '\n    },\n    {\n        value: 'MACD',\n        label: 'Moving average convergence / divergence (MACD)',\n    },\n    {\n        value: 'MACDEXT',\n        label: 'Moving average convergence / divergence'\n    },\n    {\n        value: 'APO',\n        label: 'Absolute price oscillator (APO)',\n    },\n    {\n        value: 'RSI',\n        label: 'Relative strength index (RSI)',\n    },\n    {\n        value: 'ROC',\n        label: ' Rate of change(ROC)'\n    },\n    {\n        value: 'ROCR',\n        label: 'Rate of change ratio (ROCR)'\n    },\n    {\n        value: 'ADX',\n        label: 'Average directional movement index (ADX) ',\n    },\n    {\n        value: 'AROONOSC',\n        label: ' Aroon oscillator (AROONOSC)'\n    },\n    {\n        value: 'TRIX',\n        label: 'Triple smooth exponential moving average (TRIX)',\n    },\n    {\n        value: 'OBV',\n        label: 'On balance volume (OBV) ',\n    }\n];\n\nclass Companylist extends Component {\n\n    constructor(props) {\n        super(props);\n        this.ref = firebase.firestore().collection('company');\n        this.unsubscribe = null;\n        this.state = {\n            user: [],\n            array: [],\n            searchResponse: [],\n            results: [],\n            companyData: [],\n            query: '',\n            value: '',\n            searchValue: '',\n            companySymbol: '',\n            companyName: '',\n            symbol: '',\n            name: '',\n            userEmail: '',\n            grapharray: [],\n            date: \"\",\n            open: '',\n            close: '',\n            high: '',\n            low: '',\n            volume: '',\n            indicatorObj: '',\n            historicalArray: [],\n            intervalArray: [],\n            graphData: [],\n            intervalData: [],\n            firstSelectedCompanyArray: [],\n            secondSelectedCompanyArray: [],\n            indicatorDataArray: [],\n            indicatorGraphData: [],\n            comparisonOfVolume: [],\n            historicalOpen: '',\n            historicalClose: '',\n            historicalHigh: '',\n            historicalLow: '',\n            historicalVolume: '',\n            historicalAdjClose: '',\n            values: '',\n            firstCompany: '',\n            selectedCompany: '',\n            selectedInterval: '',\n            intervalRange: '',\n            clickCompanyName: '',\n            clickCompanySymbol: '',\n            firstSelectedCompany: '',\n            isToggleOn: true,\n            setOpen: false,\n            modalOpen: false,\n            isLoaded: false,\n            isSearchClick: false,\n            isOpenSearch: false,\n            isOpenCompanyList: false,\n            isSelectinterval: false,\n            isGraphDisplay: false,\n            isSelectHistorical: false,\n            isIntervalValue: false,\n            isIndicatorGraph: false,\n            isComparedCompany: false,\n            checkAlreadyAddOrNot: false\n        };\n        this.addCompanytoWatchlist = this.addCompanytoWatchlist.bind(this);\n        this.getSearchValue = this.getSearchValue.bind(this);\n        this.submitSearchValue = this.submitSearchValue.bind(this);\n        this.getCompany = this.getCompany.bind(this);\n        this.displaySelectedCompanyGraph = this.displaySelectedCompanyGraph.bind(this);\n        this.openSearchbar = this.openSearchbar.bind(this);\n        this.displayCompanyList = this.displayCompanyList.bind(this);\n        this.logOut = this.logOut.bind(this);\n    }\n\n    componentDidMount() {\n        this.getCompany();\n        this.getDate();\n        this.unsubscribe = this.ref.onSnapshot(this.getCompany);\n    }\n\n\t/**\n     * @param {object} event get name or symbol of search company\n     */\n    getSearchValue(event) {\n        this.setState({ value: event.target.value, searchValue: event.target.value });\n    }\n\n\t/**\n     * @param {object} event validation of search button \n     */\n    submitSearchValue(event) {\n        this.setState({ value: '', isLoaded: false });\n        /**validation for search input */\n        if (!this.state.value) {\n            swal(\"Please, Enter value\", \"\", \"info\");\n        } else {\n            console.log(\"name:\", this.state.value);\n            console.log(\"searchValue\", this.state.searchValue);\n            event.preventDefault();\n            this.getApiData();\n            this.setState({ value: '' });\n        }\n    }\n\n\t/**\n     * @param {object} data call add company function and get name and symbol of add company \n     */\n    addCompanytoWatchlist(data) {\n        console.log('data: ', data);\n        this.setState({ companySymbol: data['1. symbol'], companyName: data['2. name'] });\n        this.getApiData();\n        this.addComapny();\n    }\n\n\t/**\n\t * @param {string} companySymbol wise display historical data table \n\t */\n    displayHistoricalData(companySymbol) {\n        const historicalData = companySymbol\n        console.log(\"historical data:\", historicalData);\n        console.log(\"symbol of selected company==============>\", companySymbol);\n        console.log(\"type:\", typeof companySymbol)\n        this.setState({ isSelectHistorical: true, isSelectinterval: false, historicalArray: [], isComparedCompany: false })\n        API.displayHistoricalData(historicalData)\n            .then((res) => {\n                try {\n                    const originalObject = res['Time Series (Daily)'];\n                    console.log('originalObject: ', originalObject);\n                    if (originalObject) {\n                        for (let key in originalObject) {\n                            this.state.historicalArray.push({\n                                date: key,\n                                open: originalObject[key]['1. open'],\n                                high: originalObject[key]['2. high'],\n                                low: originalObject[key]['3. low'],\n                                close: originalObject[key]['4. close'],\n                                adjclose: originalObject[key]['5. adjusted close'],\n                                volume: originalObject[key]['6. volume']\n                            })\n                        }\n                        console.log(\"historicalArray==========>\", this.state.historicalArray);\n                        this.setState({ isSelectHistorical: true })\n                    } else {\n                        swal('Internal Server Error');\n                    }\n                } catch (err) {\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n                swal('Internal Server Error')\n            })\n    }\n\n    /** selected symbol to add in watchlist */\n    addComapny() {\n        if (this.state.companySymbol) {\n            console.log(\"addCompany2:\", this.state.companySymbol);\n            return (\n                swal({\n                    title: this.state.companySymbol,\n                    text: this.state.companyName,\n                    icon: \"success\",\n                    dangerMode: true,\n                }).then((willDelete) => {\n                    if (willDelete) {\n                        this.checkIfalreadyAddOrNot(this.state.companyName)\n                    }\n                })\n            )\n        }\n    }\n\n\t/**\n\t * @param {string} companyName already add or not \n\t */\n    checkIfalreadyAddOrNot = (companyName) => {\n        this.state.isSearchClick = false;\n        this.state.isOpenCompanyList = false;\n        console.log('getcompany:');\n        localStorage.getItem('email1')\n        const email = localStorage.email1;\n        console.log(companyName)\n        let companyData = [];\n        /** it's check selected company already added into database or not */\n        firebase.firestore().collection(\"company\").where(\"name\", \"==\", companyName).where(\"email\", \"==\", email)\n            .get()\n            .then(function (querySnapshot) {\n                console.log(\"querySnapshot\", querySnapshot)\n                querySnapshot.forEach(function (doc) {\n                    const { name, email } = doc.data();\n                    console.log(\"data:\", doc.data())\n                    companyData.push({\n                        key: doc.id,\n                        doc,\n                        name,\n                        email,\n                    });\n                });\n                console.log(\"data1:\", companyData.length);\n                if (companyData.length) {\n                    console.log('found data', companyData);\n                    swal(\"Already added!\", \"\", \"info\")\n                        .then((willDelete) => {\n                            if (willDelete) {\n                                window.location.reload();\n                            }\n                        }).catch((err) => {\n                            console.log(\"hey error:\", err);\n                            swal('Internal Server Error');\n                        })\n                } else {\n                    console.log(\"new company\");\n                    addCompanyToDatabase()\n                }\n            }).catch((err) => {\n                swal('Internal Server Error');\n            })\n\n        /** Add comapny to database */\n        const addCompanyToDatabase = () => {\n            localStorage.getItem('email1')\n            let email = localStorage.email1;\n            console.log(\"isLoaded before:\", this.state.isLoaded);\n            this.ref.add({\n                symbol: this.state.companySymbol,\n                name: this.state.companyName,\n                email: email\n            }).then((docRef) => {\n                window.location.reload();\n            }).catch((error) => {\n                swal('Internal Server Error');\n            })\n        }\n    }\n\n    /** api call for selected interval value */\n    selectInterval = prop => event => {\n        this.state.isSelectHistorical = false;\n        let intervalApiData = [];\n        this.state.intervalArray = [];\n        this.state.isComparedCompany = false;\n        const intervalData = {\n            symbol: prop,\n            intervalValue: event.target.value\n        }\n        API.selectInterval(intervalData)\n            .then((res) => {\n                try {\n                    this.setState({ isIntervalValue: true, isSelectinterval: true, isSelectHistorical: false, isComparedCompany: false, selectedInterval: prop, graphData: [], isLoaded: true });\n                    let originalObject;\n                    if (event.target.value === 'MONTHLY') {\n                        originalObject = res['Monthly Time Series'];\n                    } else if (event.target.value === 'WEEKLY') {\n                        originalObject = res['Weekly Time Series'];\n                    } else {\n                        originalObject = res['Time Series (' + event.target.value + ')'];\n                    }\n                    console.log('originalObject: ', originalObject);\n                    console.log(\"interval array======second time===>\", this.state.intervalArray);\n                    if (originalObject) {\n                        for (let key in originalObject) {\n                            intervalApiData.push({\n                                date: key,\n                                open: originalObject[key]['1. open'],\n                                high: originalObject[key]['2. high'],\n                                low: originalObject[key]['3. low'],\n                                close: originalObject[key]['4. close'],\n                                volume: originalObject[key]['5. volume']\n                            })\n                        }\n                        this.setState({ intervalArray: intervalApiData, isIntervalValue: true })\n                        this.displayGraphOfInterval();\n                    }\n                } catch (err) {\n                    console.log(\"err====\", err);\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n                swal('Internal Server Error');\n            })\n    };\n\n    /** display graph of selected interval */\n    displayGraphOfInterval() {\n        const graphSeries = this.state.intervalArray;\n        let chartData = 1484418600000;\n        this.state.intervalData = [];\n        for (let i = 0; i < graphSeries.length; i++) {\n            chartData = chartData + 86400000;\n            let obj = JSON.parse(graphSeries[i].volume)\n            let innerArr = [chartData, obj];\n            this.state.intervalData.push(innerArr);\n        }\n        let series = [{\n            name: 'Stock price',\n            type: 'area',\n            data: this.state.intervalData\n        }\n        ]\n        /**display chart of selected interval */\n        let chartrender =\n            <div id=\"chart\">\n                <ReactApexChart options={options} series={series} type=\"area\" height=\"500\" />\n            </div>\n        return (<div>\n            {chartrender}\n        </div>\n        )\n    }\n\n    /** select company and call api of selected company */\n    selectComparisonCompany = prop => event => {\n        this.state.isComparedCompany = true;\n        this.state.isSelectHistorical = false;\n        this.state.isSelectinterval = false;\n        this.state.isIndicatorGraph = false;\n        this.state.isIntervalValue = false;\n        const companySymbol = event.target.value\n        API.selectComparisonCompany(companySymbol)\n            .then((res, err) => {\n                try {\n                    this.setState({ isComparedCompany: true, firstCompany: prop, isIndicatorGraph: false, selectedCompany: event.target.value })\n                    const originalObject = res['Time Series (5min)'];\n                    console.log(\"res==========>\", originalObject);\n                    if (originalObject) {\n                        for (let key in originalObject) {\n                            this.state.firstSelectedCompanyArray.push({\n                                date: key,\n                                open: originalObject[key]['1. open'],\n                                high: originalObject[key]['2. high'],\n                                low: originalObject[key]['3. low'],\n                                close: originalObject[key]['4. close'],\n                                volume: originalObject[key]['5. volume']\n                            })\n                        }\n                        console.log(\"comparison Array1=======>\", this.state.firstSelectedCompanyArray);\n                        this.comparedCompanyData();\n                    }\n                } catch (err) {\n                    console.log(\"err:\", err)\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n\n            })\n        console.log(\"this.state.isComparedCompany:\", this.state.isComparedCompany);\n    }\n\n    /** get data of first selected company  */\n    comparedCompanyData = () => {\n        let selectedCompany = [];\n        let firstSelectedCompany = this.state.firstCompany;\n        API.selectComparisonCompany(firstSelectedCompany)\n            .then((res) => {\n                try {\n                    console.log(\"res============>\", res);\n                    if (res.Note == 'Thank you for using Alpha Vantage! Our standard AP…would like to target a higher API call frequency.') {\n                        alert('wait 1 minute');\n                    } else {\n                        const originalObjectforDisplay = res['Time Series (5min)'];\n                        console.log(\"originalObject===========>\", originalObjectforDisplay);\n                        if (originalObjectforDisplay) {\n                            for (let key in originalObjectforDisplay) {\n                                selectedCompany.push({\n                                    date: key,\n                                    open: originalObjectforDisplay[key]['1. open'],\n                                    high: originalObjectforDisplay[key]['2. high'],\n                                    low: originalObjectforDisplay[key]['3. low'],\n                                    close: originalObjectforDisplay[key]['4. close'],\n                                    volume: originalObjectforDisplay[key]['5. volume']\n                                })\n                            }\n                            this.setState({ secondSelectedCompanyArray: selectedCompany })\n                            console.log(\"comparison Array2=======>\", this.state.secondSelectedCompanyArray);\n                        } else {\n                            swal('Internal Server Error');\n                        }\n                    }\n                    /**selecte other company then call below function */\n                    if (this.state.secondSelectedCompanyArray.length && this.state.firstSelectedCompanyArray.length) {\n                        this.displayGraphOfComparison();\n                    }\n                } catch (err) {\n                    swal('Internal Server Error');\n                }\n            });\n    }\n\n    /** display table of both company*/\n    displayGraphOfComparison() {\n        if (this.state.firstSelectedCompanyArray.length && this.state.secondSelectedCompanyArray.length) {\n            this.state.comparisonOfVolume = [];\n            console.log(\"length1:::\", this.state.firstSelectedCompanyArray.length);\n            console.log(\"length2:::\", this.state.secondSelectedCompanyArray.length);\n            if (this.state.firstSelectedCompanyArray.length > this.state.secondSelectedCompanyArray.length) {\n                for (let i = 0; i < this.state.secondSelectedCompanyArray.length; i++) {\n                    console.log(\"volume1:\", this.state.firstSelectedCompanyArray[i].volume);\n                    console.log(\"volume2:\", this.state.secondSelectedCompanyArray[i].volume)\n                    this.state.comparisonOfVolume.push({ date: this.state.firstSelectedCompanyArray[i].date, diffrence: this.state.secondSelectedCompanyArray[i].volume - this.state.firstSelectedCompanyArray[i].volume, first: this.state.secondSelectedCompanyArray[i].volume, second: this.state.firstSelectedCompanyArray[i].volume });\n                }\n            } else {\n                for (let i = 0; i < this.state.firstSelectedCompanyArray.length; i++) {\n                    console.log(\"volume1:\", this.state.firstSelectedCompanyArray[i].volume);\n                    console.log(\"volume2:\", this.state.secondSelectedCompanyArray[i].volume)\n                    this.state.comparisonOfVolume.push({ date: this.state.firstSelectedCompanyArray[i].date, diffrence: this.state.secondSelectedCompanyArray[i].volume - this.state.firstSelectedCompanyArray[i].volume, first: this.state.secondSelectedCompanyArray[i].volume, second: this.state.firstSelectedCompanyArray[i].volume });\n                }\n            }\n            return (\n                <div>\n                    <Paper>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Date</TableCell>\n                                    <TableCell>{this.state.firstCompany}</TableCell>\n                                    <TableCell>{this.state.selectedCompany}</TableCell>\n                                    <TableCell>Differnce</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {/**display table of compared company data */}\n                                {this.state.comparisonOfVolume.map(data => (\n                                    <TableRow key={data.diffrence}>\n                                        <TableCell>{data.date}</TableCell>\n                                        <TableCell>{data.first}</TableCell>\n                                        <TableCell>{data.second}</TableCell>\n                                        <TableCell>{data.diffrence}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </div>\n            )\n        }\n    }\n\n    /** select indicator and call API of selcted indicator */\n    getSelectedIndicatorData = prop => event => {\n        console.log(\"event:\", event.target.value);\n        console.log(\"prop:\", prop);\n        const indicatorData = {\n            selectedCompanySymbol: prop,\n            indicatorValue: event.target.value\n        }\n        API.getSelectedIndicatorData(indicatorData)\n            .then((res) => {\n                try {\n                    this.setState({ indicatorGraphData: [], indicatorDataArray: [], isIndicatorGraph: true, isIntervalValue: false, isSelectHistorical: false, isComparedCompany: false })\n                    const originalObject = res['Technical Analysis: ' + [event.target.value]];\n                    console.log(\"result:\", ['Technical Analysis: ' + [event.target.value]]);\n                    console.log(\"originalObject:\", originalObject);\n                    console.log(\"isIndicatorGraph:\", this.state.isIndicatorGraph);\n                    if (originalObject) {\n                        for (let key in originalObject) {\n                            this.state.indicatorDataArray.push({\n                                date: key,\n                                indicatorObj: originalObject[key][event.target.value],\n                            })\n                        }\n                    } else {\n                        swal('Internal Server Error')\n                    }\n                    console.log(\"indicatorDataArray:\", this.state.indicatorDataArray);\n                    this.displayGraphOfIndicator()\n                } catch (err) {\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n                console.log('hey error: ', err);\n            })\n    }\n\n    /** display graph of selected indicator */\n    displayGraphOfIndicator() {\n        console.log(\"indicator fun called\");\n        let graphSeries = this.state.indicatorDataArray;\n        console.log(\"length:\", graphSeries.length);\n        let chartData = 1484418600000;\n        for (let i = 0; i < graphSeries.length; i++) {\n            chartData = chartData + 86400000;\n            let obj = JSON.parse(graphSeries[i].indicatorObj)\n            let innerArr = [chartData, obj];\n            this.state.indicatorGraphData.push(innerArr);\n        }\n        console.log(\"graphData:\", this.state.indicatorGraphData);\n        let options = {\n            chart: {\n                stacked: false,\n                zoom: {\n                    type: 'x',\n                    enabled: true\n                },\n                toolbar: {\n                    autoSelected: 'zoom'\n                }\n            },\n            plotOptions: {\n                line: {\n                    curve: 'smooth',\n                }\n            },\n            dataLabels: {\n                enabled: false\n            },\n            markers: {\n                size: 0,\n                style: 'full',\n            },\n            colors: ['#ff4d4d'],\n            opacity: 0.4,\n            title: {\n                text: 'Stock Price Movement',\n                align: 'left'\n            },\n            fill: {\n                type: 'gradient',\n                gradient: {\n                    shadeIntensity: 1,\n                    inverseColors: false,\n                    opacityFrom: 0.5,\n                    opacityTo: 0,\n                    stops: [0, 90, 100]\n                },\n            },\n            yaxis: {\n                min: 0,\n                max: 250,\n                labels: {\n                    formatter: function (val) {\n                        return (val).toFixed(0);\n                    },\n                },\n                title: {\n                    text: 'Price'\n                },\n            },\n            xaxis: {\n                type: 'datetime',\n            },\n            tooltip: {\n                shared: false,\n                y: {\n                    formatter: function (val) {\n                        return (val / 1000).toFixed(0)\n                    }\n                }\n            }\n        }\n        let series = [{\n            name: 'Stock price',\n            data: this.state.indicatorGraphData\n        }]\n        // options.yaxis.min = 0;\n        // options.yaxis.max = 250;\n        console.log(\"options.yaxis.min:\", options.yaxis.min)\n        /**display graph of selected indicator */\n        let chartrender =\n            <div id=\"chart\">\n                <ReactApexChart options={options} series={series} type=\"area\" height=\"500\" />\n            </div>\n        return (<div>\n            {chartrender}\n        </div>\n        )\n    }\n\n    /** display watchlist and graph or search list */\n    displayCompanyList() {\n        const { date } = this.state;\n        /**any company added into current user watchlist */\n        if (this.state.grapharray.length) {\n            let graphSeries = this.state.grapharray;\n            let chartData = 1484418600000;\n            let graphData = [];\n            for (let i = 0; i < graphSeries.length; i++) {\n                chartData = chartData + 86400000;\n                let obj = JSON.parse(graphSeries[i].volume)\n                let innerArr = [chartData, obj];\n                graphData.push(innerArr);\n            }\n            let series = [{\n                name: 'Stock price',\n                data: graphData\n            },\n            ]\n            /**display graph of selected company */\n            var chartrender =\n                <div id=\"chart\">\n                    <ReactApexChart options={options} series={series} type=\"area\" height=\"450\" />\n                    <span style={{ color: 'gray' }}>Open: </span> <span style={{ marginRight: 10 }}>{this.state.open}</span>\n                    <span style={{ color: 'gray' }}>Close: </span> <span style={{ marginRight: 10 }}>{this.state.close}</span>\n                    <span style={{ color: 'gray' }}>High: </span> <span style={{ marginRight: 10 }}>{this.state.high}</span>\n                    <span style={{ color: 'gray' }}>Low: </span> <span style={{ marginRight: 10 }}>{this.state.low}</span>\n                    <span style={{ color: 'gray' }}>Volume: </span> <span style={{ marginRight: 10 }}>{this.state.volume}</span>\n                </div>\n        }\n        /**it's display graph or serch response table */\n        let showGraphOrSearchResult = this.state.searchResponse.length ? <div>\n            <center><h3>Search Response....</h3></center>\n            {this.state.searchResponse.map(data =>\n                <List key={data['1. symbol']} className=\"list\">\n                    <ListItem>\n                        <ListItemText className=\"search_list\" primary={data['1. symbol']} secondary={data['2. name']} />\n                        <ListItemSecondaryAction className=\"search_list1\">\n                            <IconButton color=\"primary\" edge=\"end\" aria-label=\"Delete\" onClick={() => this.addCompanytoWatchlist(data)} className=\"addIcon\">\n                                <AddIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                </List>\n            )}\n        </div> : (this.state.searchResponse ? <div>\n            <span className=\"company_symbol\">{this.state.clickCompanySymbol}</span><span style={{ color: 'gray' }}>{this.state.clickCompanyName}</span>\n            {this.state.isGraphDisplay ? (<span>\n                <span className=\"historical_data\" style={{ padding: 10 }} onClick={() => this.displayHistoricalData(this.state.clickCompanySymbol)}>Historical Data</span>\n                <TextField\n                    select\n                    style={{ float: 'right', padding: 10 }}\n                    value={this.state.values.intervalRange}\n                    onChange={this.selectInterval(this.state.clickCompanySymbol)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Interval</InputAdornment>,\n                    }}>\n                    {ranges.map(option => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    select\n                    style={{ float: 'right', padding: 10 }}\n                    value={this.state.values.intervalRange}\n                    onChange={this.selectComparisonCompany(this.state.clickCompanySymbol)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Comparison</InputAdornment>,\n                    }}>\n                    {this.state.companyData.map(company => (\n                        <MenuItem key={company.symbol} value={company.symbol}>\n                            {company.symbol}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    select\n                    style={{ float: 'right', padding: 10 }}\n                    value={this.state.values.intervalRange}\n                    onChange={this.getSelectedIndicatorData(this.state.clickCompanySymbol)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Indicator</InputAdornment>,\n                    }}>\n                    {indicatorList.map(indicator => (\n                        <MenuItem key={indicator.value} value={indicator.value} >\n                            {indicator.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n\n            </span>) : ('')}\n            {/**when select historical data at that time display table */}\n            {this.state.isSelectHistorical ? (<div>\n                <Paper>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Date</TableCell>\n                                <TableCell align=\"right\">Open</TableCell>\n                                <TableCell align=\"right\">High</TableCell>\n                                <TableCell align=\"right\">Low</TableCell>\n                                <TableCell align=\"right\">Close</TableCell>\n                                <TableCell align=\"right\">Adj Close</TableCell>\n                                <TableCell align=\"right\">Volume</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.historicalArray.map(historicalData => (\n                                <TableRow key={historicalData.date}>\n                                    <TableCell component=\"th\" scope=\"row\">{historicalData.date}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.open}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.high}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.low}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.close}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.adjclose}</TableCell>\n                                    <TableCell align=\"right\">{historicalData.volume}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>) : (<div>{chartrender ? <div>{this.state.isIntervalValue ? <div>{this.displayGraphOfInterval()}</div> : <div>{this.state.isIndicatorGraph ? <div>{this.displayGraphOfIndicator()}</div> : <div>{this.state.isComparedCompany ? <div>{this.displayGraphOfComparison()}</div> : <div>{chartrender}</div>}</div>}</div>}</div>\n                : <div></div>}</div>)}</div>\n            : 'No data found')\n        /**display watchlist company list */\n        let displayCompany = this.state.companyData.length ? <div>{this.state.companyData.map(company =>\n            <List key={company.key} className=\"cursorClass\">\n                <ListItem onClick={() => this.displaySelectedCompanyGraph(company)}>\n                    <ListItemText primary={company.symbol} secondary={company.name} />\n                    <ListItemSecondaryAction>\n                        <IconButton edge=\"end\" aria-label=\"Delete\" style={{ color: '#ff4d4d' }} onClick={this.deleteCompany.bind(this, company.key)}>\n                            <RemoveCircle />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        )} </div> : <div> <center><p>Add Comapany to watchlist</p></center></div>\n        /**dispaly graph or search list and no company added or search then dispaly 'no data found' */\n        let displayData = this.state.companyData.length ? <div>{showGraphOrSearchResult}</div> : <div><center><h2>No Company Found</h2></center></div>\n\n        /**when searchbar is open but not enter a value */\n        if (this.state.isOpenSearch && !this.state.isSearchClick) {\n            return (\n                <div>\n                    <div className=\"grid_class\">\n                        <span style={{ fontSize: 25, marginLeft: 8, color: '#fff' }}><b>Stock</b></span><br />\n                        <span style={{ fontSize: 17, color: 'gray', marginLeft: 8 }}>{date}</span>\n                        <div className=\"logout\">\n                            <Link to=\"/login\"><Button variant=\"contained\" onClick={() => this.logOut()}>\n                                <b>Logout</b>\n                            </Button></Link>\n                        </div>\n                    </div>\n                    {this.addComapny()}\n                    <div className=\"grid_class1\">\n                        <div className=\"company_list\">\n                            <Grid container spacing={1}>\n                                <Grid item sm={10}>\n                                    <p style={{ marginLeft: 18 }}>Manage WatchList</p>\n                                </Grid>\n                                <Grid item sm={2}>\n                                    <p onClick={() => this.openCompanyList()} style={{ color: '#3f51b5', cursor: 'pointer' }}>Done</p>\n                                </Grid>\n                            </Grid>\n                            {this.state.companyData.map(company =>\n                                <List key={company.key} className=\"vl\" >\n                                    <ListItem >\n                                        <ListItemText primary={company.symbol} secondary={company.name} />\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge=\"end\" aria-label=\"Delete\" style={{ color: '#ff4d4d' }} onClick={this.deleteCompany.bind(this, company.key)}>\n                                                <RemoveCircle />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            )}\n                        </div>\n                        <div className=\"search_bar\">\n                            <Typography variant=\"h6\" noWrap>\n                                <TextField\n                                    id=\"outlined-with-placeholder\"\n                                    label=\"Search\"\n                                    className=\"search_input\"\n                                    value={this.state.value}\n                                    onChange={this.getSearchValue}\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                />\n                                <Button id=\"search\" onClick={this.submitSearchValue} style={{ color: '#fff' }} disabled={!this.state.value} autoFocus>\n                                    Search\n\t\t\t\t\t\t\t\t</Button>\n                            </Typography>\n                        </div>\n                    </div>\n                </div>\n            )\n            /**searchbar is open then it's return */\n        } else if (this.state.isSearchClick) {\n            if (!this.state.searchResponse.length) {\n                console.log(\"========else if ========if======\");\n                return (\n                    <div>\n                        <div className=\"grid_class\">\n                            <span style={{ fontSize: 25, marginLeft: 8, color: '#fff' }}><b>Stock</b></span><br />\n                            <span style={{ fontSize: 17, color: 'gray', marginLeft: 8 }}>{date}</span>\n                            <div className=\"logout\">\n                                <Link to=\"/login\"><Button variant=\"contained\" onClick={() => this.logOut()}>\n                                    <b>Logout</b>\n                                </Button></Link>\n                            </div>\n                        </div>\n\n                        {this.addComapny()}\n                        <div className=\"grid_class1\">\n                            <div className=\"company_list\">\n                                <Grid container spacing={12}>\n                                    <Grid item sm={10}>\n                                        <p style={{ marginLeft: 18 }}>Manage Watchlist</p>\n                                    </Grid>\n                                    <Grid item sm={2}>\n                                        <p onClick={() => this.openCompanyList()} style={{ color: '#3f51b5' }}>Done</p>\n                                    </Grid>\n                                </Grid>\n                                {this.state.companyData.map(company =>\n                                    <List key={company.key} className=\"cursorClass vl\">\n                                        <ListItem onClick={() => this.displaySelectedCompanyGraph(company)}>\n                                            <ListItemText primary={company.symbol} secondary={company.name} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton edge=\"end\" aria-label=\"Delete\" style={{ color: '#ff4d4d' }} onClick={this.deleteCompany.bind(this, company.key)}>\n                                                    <RemoveCircle />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    </List>\n                                )}\n                            </div>\n                            <div className=\"searching_list\">\n                                <center><div className=\"searchCompany_list\">\n                                    <p style={{ marginRight: 296 }}>Showing Results for: <span style={{ textTransform: 'capitalize' }}><b>{this.state.searchValue}</b></span></p>\n                                    No Data Found\n\t\t\t\t\t          </div>\n                                </center>\n                            </div>\n                        </div>\n                    </div>\n                )\n            } else {\n                console.log(\"else if =========else\");\n                return (\n                    <div>\n                        <div className=\"grid_class\">\n                            <span style={{ fontSize: 25, marginLeft: 8, color: '#fff' }}><b>Stock</b></span><br />\n                            <span style={{ fontSize: 17, color: 'gray', marginLeft: 8 }}>{date}</span>\n                            <div className=\"logout\">\n                                <Link to=\"/login\"><Button variant=\"contained\" onClick={() => this.logOut()}>\n                                    <b>Logout</b>\n                                </Button></Link>\n                            </div>\n                        </div>\n                        {this.addComapny()}\n                        <div className=\"grid_class1\">\n                            <div className=\"company_list\">\n\n                                <Grid container spacing={1}>\n                                    <Grid item sm={10}>\n                                        <p style={{ marginLeft: 18 }}>Manage Watchlist</p>\n                                    </Grid>\n                                    <Grid item sm={2}>\n                                        <p onClick={() => this.openCompanyList()} style={{ color: '#3f51b5', cursor: 'pointer' }}>Done</p>\n                                    </Grid>\n                                </Grid>\n                                {this.state.companyData.map(company =>\n                                    <List key={company.key} >\n                                        <ListItem className=\"vl\">\n                                            <ListItemText primary={company.symbol} secondary={company.name} />\n                                            <ListItemSecondaryAction>\n                                                <IconButton edge=\"end\" aria-label=\"Delete\" style={{ color: '#ff4d4d' }} onClick={this.deleteCompany.bind(this, company.key)}>\n                                                    <RemoveCircle />\n                                                </IconButton>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    </List>\n                                )}\n                            </div>\n                            <div className=\"search_bar\">\n                                <Typography variant=\"h6\" noWrap>\n                                    <TextField\n                                        id=\"outlined-with-placeholder\"\n                                        label=\"Search\"\n                                        className=\"search_input\"\n                                        value={this.state.value}\n                                        onChange={this.getSearchValue}\n                                        margin=\"normal\"\n                                        variant=\"outlined\"\n                                    />\n                                    <Button className=\"search_button\" id=\"search\" disabled={!this.state.value} onClick={this.submitSearchValue} style={{ color: '#fff' }} autoFocus>\n                                        Search\n\t\t\t\t\t\t\t\t\t</Button>\n                                </Typography>\n\n                                <center><div className=\"searchCompany_list\">\n                                    <p style={{ marginRight: 296 }}>Showing Results for: <span style={{ textTransform: 'capitalize' }}><b>{this.state.searchValue}</b></span></p>\n\n                                    {this.state.searchResponse.map(data =>\n                                        <List key={data['1. symbol']} >\n                                            <ListItem>\n                                                <ListItemText primary={data['1. symbol']} secondary={data['2. name']} />\n                                                <ListItemSecondaryAction >\n                                                    <IconButton color=\"primary\" edge=\"end\" aria-label=\"Delete\" onClick={() => this.addCompanytoWatchlist(data)} >\n                                                        <AddIcon />\n                                                    </IconButton>\n                                                </ListItemSecondaryAction>\n                                            </ListItem>\n                                        </List>\n                                    )}\n                                </div>\t</center>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n        } else {\n            if (!this.state.isOpenCompanyList) {\n                console.log(\"=====else ==========if\");\n                return (\n                    <div>\n                        <div className=\"grid_class\">\n                            <span style={{ fontSize: 28, marginLeft: 8, color: '#fff' }}><b>Stock</b></span><br />\n                            <span style={{ fontSize: 17, color: 'gray', marginLeft: 8 }}>{date}</span>\n                            <div className=\"logout\">\n                                <Link to=\"/login\"><Button variant=\"contained\" onClick={() => this.logOut()}>\n                                    <b>Logout</b>\n                                </Button></Link>\n                            </div>\n                        </div>\n                        <div className=\"grid_class1\">\n                            <div className=\"company_list\">\n                                <div className=\"plus_class\">\n                                    <Grid container spacing={1}>\n                                        <Grid item sm={4}>\n                                            <IconButton color=\"primary\" edge=\"end\" aria-label=\"Delete\" className=\"addIcon\" onClick={() => this.openSearchbar()}>\n                                                <AddIcon />\n                                            </IconButton>\n                                        </Grid>\n                                        <Grid item sm={8}>\n                                            <p><b>Manage WatchList</b></p>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                                {displayCompany}\n                            </div>\n                            <div className=\"graph_list\">\n                                {displayData}\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n\n        }\n    }\n\n    /** get data of searching company */\n    getApiData() {\n        console.log(\"value:\", this.state.value);\n        const companySymbol = this.state.value;\n        API.getApiData(companySymbol)\n            .then((res) => {\n                try {\n                    console.log(\"resssssssss:\", res);\n                    console.log(\"data of response:\", res['bestMatches']);\n                    this.setState({\n                        searchResponse: res['bestMatches'],\n                        isSearchClick: true,\n                        isLoaded: true\n                    });\n                    if (!this.state.searchResponse.length) {\n                        console.log(\"searchrespone:\", this.state.searchResponse.length);\n                        console.log(\"===if callling===\");\n                        return (\n                            <div>\n                                \"No Data Found\"\n\t\t\t\t\t\t\t</div>\n                        )\n                    }\n                } catch (err) {\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n                swal('Internal Server Error');\n            })\n    }\n\n    /** get current date */\n    getDate = () => {\n        let date = new Date().toDateString();\n        this.setState({ date });\n    };\n\n\t/**\n\t * @param {string} id wise delete company from watchlist \n\t */\n    deleteCompany(id) {\n        firebase.firestore().collection('company').doc(id).delete().then(() => {\n            console.log(\"cdata:\", this.state.companyData);\n            swal(\"Successfully deleted!\", \"\", \"success\");\n            console.log(\"Document successfully deleted!\");\n            if (this.state.companyData.length === 1) {\n                window.location.reload();\n            }\n        }).catch((error) => {\n            swal('Internal Server Error');\n        });\n    }\n\n\t/**\n\t * @param {object} data wise display graph \n\t */\n    displaySelectedCompanyGraph(data) {\n        this.state.isSelectHistorical = false;\n        this.state.isIndicatorGraph = false;\n        this.state.isComparedCompany = false;\n        this.state.isSelectinterval = false;\n        this.state.isIntervalValue = false;\n        this.setState({\n            isLoaded: false, isSelectinterval: false, isSelectHistorical: false, isComparedCompany: false, isIndicatorGraph: false\n        })\n        console.log('data: ', data);\n        let grapharray = [];\n        const companySymbol = data.symbol;\n        API.displaySelectedCompanyGraph(companySymbol)\n            .then((res) => {\n                try {\n                    if (!res) {\n                        swal(\"Click after a minute\");\n                    } else {\n                        const originalObject = res['Time Series (5min)'];\n                        if (originalObject) {\n                            for (let key in originalObject) {\n                                grapharray.push({\n                                    date: key,\n                                    open: originalObject[key]['1. open'],\n                                    high: originalObject[key]['2. high'],\n                                    low: originalObject[key]['3. low'],\n                                    close: originalObject[key]['4. close'],\n                                    volume: originalObject[key]['5. volume']\n                                })\n                            }\n                        } else {\n                            swal('Internal Server Error');\n                        }\n                        if (!grapharray.length) {\n                            setTimeout(this.setState({ isLoaded: true }), 3000);\n                            swal('click after a minue')\n                        } else {\n                            console.log(\"open:\", grapharray['0'].open);\n                            console.log(\"isGraphDisplay before======>\", this.state.isGraphDisplay);\n                            this.setState({\n                                grapharray: grapharray,\n                                open: grapharray['0'].open,\n                                close: grapharray['0'].close,\n                                high: grapharray['0'].high,\n                                low: grapharray['0'].low,\n                                volume: grapharray['0'].volume,\n                                clickCompanyName: data.name,\n                                clickCompanySymbol: data.symbol,\n                                isLoaded: true,\n                                isGraphDisplay: true\n                            })\n                            console.log(\"isGraphDisplay after======>\", this.state.isGraphDisplay);\n                        }\n                    }\n                } catch (err) {\n                    swal('Internal Server Error');\n                }\n            }).catch((err) => {\n                swal('Internal Serverhnjhnu')\n            })\n    }\n\n    /** logout and clear localstorage */\n    logOut = () => {\n        firebase\n            .auth()\n            .signOut().then(function () {\n                console.log('Signed Out');\n                localStorage.clear();\n                localStorage.removeItem('email1');\n                console.log(localStorage);\n                history.push('/')\n            }, function (error) {\n                swal('Internal Server Error');\n            });\n    }\n\n    /** open searchbar onclick of plus sign */\n    openSearchbar() {\n        this.setState({\n            isOpenSearch: true\n        });\n    }\n\n    /** display watchlist onclick of done */\n    openCompanyList() {\n        this.setState({ isOpenCompanyList: false })\n        console.log(\"isOpenCompanyList:\", this.state.isOpenCompanyList);\n        history.push('/Watch-list')\n    }\n\n    /** get current user added company from database */\n    getCompany() {\n        let companyData = [];\n        localStorage.getItem('email1')\n        let email = localStorage.email1;\n        console.log('email==========>', email);\n        firebase.firestore().collection(\"company\").where(\"email\", \"==\", email)\n            .get()\n            .then(function (querySnapshot) {\n                querySnapshot.forEach(function (doc) {\n                    const { name, symbol } = doc.data();\n                    companyData.push({\n                        key: doc.id,\n                        doc,\n                        name,\n                        symbol,\n                    });\n                });\n                setLoader(true);\n                if (companyData.length) {\n                    console.log('found data==========>', companyData);\n                    setTheState(companyData);\n                    console.log(\"call\");\n                    // displayGraph()\n                } else {\n                    return (\n                        <div>\n                            <p>No data found</p>\n                        </div>\n                    )\n                }\n            }).catch(function (error) {\n                console.log(\"Error getting documents: \", error);\n            });\n\n        let setLoader = (isLoaded) => {\n            this.setState({\n                isLoaded: isLoaded\n            })\n        }\n\n        let setTheState = (companyData) => {\n            this.setState({\n                companyData: companyData,\n                isLoaded: true\n            })\n        }\n        let displayGraph = () => {\n            console.log(\"companyData before:\", this.state.companyData);\n            console.log(\"companyData:\", this.state.companyData);\n            let firstCompanySymbol = this.state.companyData[0];\n            console.log(\"firstCompanySymbol\", firstCompanySymbol);\n            this.displaySelectedCompanyGraph(firstCompanySymbol)\n        }\n    }\n\n    render() {\n        const { isLoaded } = this.state;\n        if (!isLoaded) {\n            return (\n                <center>\n                    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n                </center>\n            )\n        } else if (isLoaded) {\n            return (\n                <div className=\"main\">\n                    {this.displayCompanyList()}\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <h2>Sorry no data found</h2>\n                </div>\n            );\n        }\n    }\n}\n\n\nexport default Companylist\n\n","import React, { Component } from 'react';\nimport Login from './components/Login';\nimport Companylist from './components/Company-list';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = localStorage.getItem('email1');\n  }\n\n  render() {\n    if (!this.state) {\n      return (\n        <div>\n          <Login />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Companylist />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport firebase from '../Firebase';\nimport './login.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nclass SignUp extends Component {\n\n  constructor() {\n    super();\n    this.ref = firebase.firestore().collection('users');\n    this.state = {\n      email: '',\n      password: '',\n      username: '',\n      createdAt: '',\n      hidden: true,\n    };\n    this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  onChange = (e) => {\n    const state = this.state\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n    console.log(\"state=============?\", this.state.username);\n  }\n\n  /**show or hide password field value */\n  toggleShow() {\n    this.setState({ hidden: !this.state.hidden });\n  }\n\n  /**signUp and add data to databse */\n  signUp = (e) => {\n    e.preventDefault();\n    const { email, password, username } = this.state;\n    console.log('users: ', email, password, username);\n    if (!username) {\n      swal(\"Username is required\", \"\", \"error\");\n      return;\n    }\n    this.ref.add({\n      email,\n      password,\n      username,\n      createdAt: Date.now(),\n      isDeleted: false,\n      updatedAt: Date.now(),\n      company: []\n    }).then((docRef) => {\n      this.setState({\n        email: '',\n        password: '',\n        username: ''\n      });\n      console.log(\"name-=============>\", this.state.username);\n    })\n      .catch((error) => {\n        console.error(\"Error adding document: \", error);\n      });\n\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password).then((u) => {\n        console.log(\"u:\", u)\n        if (!this.state.username) {\n          swal(\"Please, Enter Username\", \"\", \"error\");\n        }\n        console.log(\"props:::::::::::\",this.props)\n        swal(\"Signup sucessfully\", \"\", \"success\");\n        this.props.history.push(\"/login\");\n      }).catch((error) => {\n        console.log(\"error===========>\", error);\n        if (error.code === \"auth/weak-password\") {\n          swal(\"Enter Strong Password\", \"Password should be at least 6 characters\", \"error\");\n        } else if (error.code === \"auth/email-already-in-use\") {\n          swal(\"Email already registerd\", \"\", \"error\");\n        } else if (error.code === \"auth/invalid-email\") {\n          swal(\"Enter valid Email\", \"\", \"error\");\n        } else if (error.code === \"Cannot read property 'users' of undefined\") {\n          swal(\"Please, Enter Username\", \"\", \"error\");\n        } else {\n          swal(\"Internal Server Error\", \"\", \"error\");\n        }\n      });\n  };\n\n  /**username and password validation */\n  isDisabled() {\n    if (!this.state.username || !this.state.password || !(this.state.password.length >= '6')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const { email, password, username } = this.state;\n    return (\n      <div>\n        <div className=\"backgroung_class\">\n          <div className=\"main_class \">\n            <h1 className=\"text-center\">Stock Signup</h1>\n            <Grid container spacing={1} xs={12}>\n              <Grid item sm={12} xs={12}>\n                <TextField\n                  id=\"outlined-user-input\"\n                  label=\"Username\"\n                  type=\"text\"\n                  name=\"username\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={username}\n                  required\n                  onChange={this.onChange}\n\n                />\n              </Grid>\n              <Grid item sm={12} xs={12}>\n                <TextField\n                  id=\"outlined-email-input\"\n                  label=\"Email\"\n                  type=\"email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={email}\n                  onChange={this.onChange}\n\n                  required\n                />\n              </Grid>\n              <Grid item sm={12} xs={12}>\n                <TextField\n                  id=\"outlined-password-input\"\n                  label=\"Password\"\n                  type={this.state.hidden ? \"password\" : \"text\"}\n                  name=\"password\"\n                  autoComplete=\"current-password\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={password}\n                  onChange={this.onChange}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          edge=\"end\"\n                          aria-label=\"Toggle password visibility\"\n                          onClick={this.toggleShow}\n                        >\n                          {password ? <VisibilityOff /> : <Visibility />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n\n                />\n              </Grid>\n              <Grid item sm={12} xs={12}>\n                <Button color=\"primary\" disabled={this.isDisabled()} variant=\"contained\" size=\"large\" onClick={(e) => this.signUp(e)}>\n                  SignUp\n        </Button>\n              </Grid>\n              <Divider />\n              <Grid item sm={12}>\n                <div className=\"text-center\">\n                  Already Registered? <Button color=\"primary\"><Link to=\"/login\">Login</Link></Button>\n                </div>\n              </Grid>\n            </Grid>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default SignUp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Signup from './components/Sign-up';\nimport Login from './components/Login';\nimport Companylist from './components/Company-list';\nimport createHistory from 'history/createBrowserHistory'\n\nconst history = createHistory({\n        hashType: '#' // the default\n      });\n      \nReactDOM.render(\n                 <HashRouter  history={history}>\n                        <div>\n                                <Route exact path='/' component={App} />\n                                <Route path='/sign-up' render={() => (localStorage.getItem('email1') ? (<Route component={Companylist} />)\n                                        : (<Route component={Signup} />)\n                                )} />\n                                <Route path='/login' render={() => (localStorage.getItem('email1') ? (<Route component={Companylist} />)\n                                        : (<Route component={Login} />)\n                                )} />\n                                <Route path='/Company-list' render={() => (localStorage.getItem('email1') ? (<Route component={Companylist} />)\n                                        : (<Route component={Login} />)\n                                )} />\n                                 <Route path='/Watch-list' render={() => (localStorage.getItem('email1') ? (<Route component={Companylist} />)\n                                        : (<Route component={Login} />)\n                                )} />\n                        </div>\n                </HashRouter>,\n        document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nmodule.exports = {\n    getBaseUrl : \"https://www.alphavantage.co/query?function=\",\n    getBaseUrlForKey : \"&apikey=Z51NHQ9W28LJMOHB\"\n}"],"sourceRoot":""}